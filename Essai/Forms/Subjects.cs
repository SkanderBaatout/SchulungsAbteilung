using DocumentFormat.OpenXml.Wordprocessing;
using Essai.DataAccess;
using Essai.Forms;
using Essai.Models;
using Microsoft.Office.Interop.Excel;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using DataTable = System.Data.DataTable;

namespace Essai
{
    public partial class Subjects : Form
    {
        private List<Content> contentList = new List<Content>();
        private int currentSubjectId = 0;

        private readonly SubjectDataAccess subjectDataAccess;

        public Subjects()
        {
            InitializeComponent();

            subjectDataAccess = new SubjectDataAccess("data source = SKANDERBAATOUT;database = quiz ; integrated security = True ; TrustServerCertificate=True");

            DisplaySubjects();
            contentTypeCB.Items.Add("Docs");
            contentTypeCB.Items.Add("Images");
            contentTypeCB.Items.Add("Videos");
            contentTypeCB.Items.Add("Other");
            contentPathLabel.Visible = false;
            subjectsList.Columns[0].Visible = false;
        }

        private void DisplaySubjects()
        {
            List<Subject> subjects = subjectDataAccess.GetAllSubjects();

            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Id");
            dataTable.Columns.Add("Name");
            dataTable.Columns.Add("Description");
            dataTable.Columns.Add("ContentType");
            dataTable.Columns.Add("DateAdded");
            dataTable.Columns.Add("IsActive");
            dataTable.Columns.Add("ContentTitle");

            foreach (Subject subject in subjects)
            {
                DataRow row = dataTable.NewRow();
                row["Id"] = subject.Id;
                row["Name"] = subject.Name;
                row["Description"] = subject.Description;
                row["ContentType"] = subject.ContentType;
                row["DateAdded"] = subject.DateAdded.ToString("yyyy-MM-dd");
                row["IsActive"] = subject.IsActive;

                if (subject.Content != null)
                {
                    List<string> contentTitles = new List<string>();
                    foreach (Content content in subject.Content)
                    {
                        contentTitles.Add(content.ContentTitle);
                    }
                    row["ContentTitle"] = string.Join(", ", contentTitles);
                }

                dataTable.Rows.Add(row);
            }

            subjectsList.DataSource = dataTable;
        }

        private void ResetForm()
        {
            subjectTb.Clear();
            descriptionTB.Clear();
            contentTypeCB.SelectedIndex = -1;
            dateTimePicker.Value = DateTime.Now;
            isActiveCheckBox.Checked = true;
            contentList.Clear();
            ContentListBoxx.Items.Clear();
            currentSubjectId = 0;

            savebtn.Text = "Add";
            deleteButton.Enabled = false;
        }

        private void loadBtn_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            if (contentTypeCB.SelectedItem != null)
            {
                switch (contentTypeCB.SelectedItem.ToString())
                {
                    case "Docs":
                        openFileDialog.Filter = "Word Documents|*.doc;*.docx|PDF Files|*.pdf";
                        break;
                    case "Images":
                        openFileDialog.Filter = "ImageFiles|*.jpg;*.jpeg;*.png;*.gif";
                        break;
                    case "Videos":
                        openFileDialog.Filter = "Video Files|*.mp4;*.avi;*.wmv;*.mov";
                        break;
                    default:
                        openFileDialog.Filter = "All Files|*.*";
                        break;
                }

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    byte[] contentData = File.ReadAllBytes(openFileDialog.FileName);
                    string contentTitle = Path.GetFileName(openFileDialog.FileName);

                    Content content = new Content
                    {
                        ContentId = 0, // The ContentId will be automatically generated by the database
                        SubjectId = 0, // The SubjectId will be set later
                        ContentType = contentTypeCB.SelectedItem.ToString(),
                        ContentTitle = contentTitle,
                        ContentData = contentData
                    };

                    contentList.Add(content);
                    ContentListBoxx.Items.Add(contentTitle);
                }
            }
            else
            {
                MessageBox.Show("Please select a content type first.");
            }
        }
        private void resetbtn_Click(object sender, EventArgs e)
        {
            ResetForm();
        }
        // Edit button click event handler
        private void editbtn_Click(object sender, EventArgs e)
        {
            if (currentSubjectId == 0)
            {
                MessageBox.Show("Please select a subject to edit.");
                return;
            }

            Subject subject = subjectDataAccess.GetSubjectById(currentSubjectId);

            if (subject != null)
            {
                subject.Name = subjectTb.Text;
                subject.Description = descriptionTB.Text;

                if (contentTypeCB.SelectedItem == null)
                {
                    MessageBox.Show("Please select a content type.");
                    return;
                }

                subject.ContentType = contentTypeCB.SelectedItem.ToString();
                subject.DateAdded = dateTimePicker.Value;
                subject.IsActive = isActiveCheckBox.Checked;
                subject.Content = contentList;

                try
                {
                    subjectDataAccess.UpdateSubject(subject);
                    MessageBox.Show("Subject updated successfully.");
                    ResetForm();
                    DisplaySubjects();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to update subject: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Failed to retrieve subject.");
            }
        }
        private async void savebtn_Click(object sender, EventArgs e)
        {
            if (string.IsNullOrWhiteSpace(subjectTb.Text) || string.IsNullOrWhiteSpace(descriptionTB.Text) ||
                contentTypeCB.SelectedItem == null || string.IsNullOrWhiteSpace(contentTypeCB.SelectedItem.ToString()))
            {
                MessageBox.Show("Please enter a name, description, and content type.");
                return;
            }

            if (contentList.Count == 0)
            {
                MessageBox.Show("Please add at least one content item.");
                return;
            }

            // Disable the "Save" button to prevent multiple clicks
            savebtn.Enabled = false;

            try
            {
                Subject subject = new Subject
                {
                    Id = currentSubjectId,
                    Name = subjectTb.Text,
                    Description = descriptionTB.Text,
                    ContentType = contentTypeCB.SelectedItem.ToString(),
                    DateAdded = dateTimePicker.Value,
                    IsActive = isActiveCheckBox.Checked,
                    Content = new List<Content>()
                };

                foreach (Content content in contentList)
                {
                    content.SubjectId = currentSubjectId;
                    subject.Content.Add(content);
                }

                if (currentSubjectId == 0)
                {
                    subjectDataAccess.InsertSubject(subject, contentList);
                }
                else
                {
                    subjectDataAccess.UpdateSubject(subject);
                }

                MessageBox.Show("Subject saved successfully.");
                ResetForm();
                DisplaySubjects();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error saving subject: {ex.Message}");
            }
            finally
            {
                // Re-enable the "Save" button
                savebtn.Enabled = true;
            }
        }
        private async void deleteButton_Click(object sender, EventArgs e)
        {
            if (currentSubjectId == 0)
            {
                return;
            }

            DialogResult result = MessageBox.Show("Are you sure you want to delete this subject?", "Confirm Deletion", MessageBoxButtons.YesNo);

            if (result == DialogResult.Yes)
            {
                try
                {
                    subjectDataAccess.DeleteSubject(currentSubjectId);
                    MessageBox.Show("Subject deleted successfully.");
                    ResetForm();
                    DisplaySubjects();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error deleting subject: {ex.Message}");
                }
            }
        }

        private void subjectsList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0)
            {
                int subjectId = Convert.ToInt32(subjectsList.Rows[e.RowIndex].Cells["Id"].Value);

                Subject subject = subjectDataAccess.GetSubjectById(subjectId);

                if (subject != null)
                {
                    subjectTb.Text = subject.Name;
                    descriptionTB.Text = subject.Description;
                    contentTypeCB.SelectedItem = subject.ContentType;

                    // Check if subject.DateAdded is not equal to DateTime.MinValue
                    dateTimePicker.Value = subject.DateAdded != DateTime.MinValue ? subject.DateAdded : DateTime.Now;
                    
                    isActiveCheckBox.Checked = subject.IsActive;

                    contentList = subject.Content;
                    ContentListBoxx.Items.Clear();
                    foreach (Content content in contentList)
                    {
                        ContentListBoxx.Items.Add(content.ContentTitle);
                    }

                    currentSubjectId = subject.Id;

                    //savebtn.Text = "Update";
                    deleteButton.Enabled = true;
                }
            }
        }

        private void addContentBtn_Click(object sender, EventArgs e)
        {
            OpenFileDialog openFileDialog = new OpenFileDialog();

            if (contentTypeCB.SelectedItem != null)
            {
                switch (contentTypeCB.SelectedItem.ToString())
                {
                    case "Docs":
                        openFileDialog.Filter = "Word Documents|*.doc;*.docx|PDF Files|*.pdf";
                        break;
                    case "Images":
                        openFileDialog.Filter = "ImageFiles|*.jpg;*.jpeg;*.png;*.gif";
                        break;
                    case "Videos":
                        openFileDialog.Filter = "Video Files|*.mp4;*.avi;*.wmv;*.mov";
                        break;
                    default:
                        openFileDialog.Filter = "All Files|*.*";
                        break;
                }

                if (openFileDialog.ShowDialog() == DialogResult.OK)
                {
                    byte[] contentData = File.ReadAllBytes(openFileDialog.FileName);
                    string contentTitle = Path.GetFileName(openFileDialog.FileName);

                    Content content = new Content
                    {
                        ContentId = 0, // The ContentId will be automatically generated by the database
                        SubjectId = currentSubjectId,
                        ContentType = contentTypeCB.SelectedItem.ToString(),
                        ContentTitle = contentTitle,
                        ContentData = contentData
                    };

                    contentList.Add(content);
                    ContentListBoxx.Items.Add(contentTitle);
                }
            }
            else
            {
                MessageBox.Show("Please select a content type first.");
            }
        }
    }
}